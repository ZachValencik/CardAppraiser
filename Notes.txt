
--Code from the command line on how to insert data in the database
    https://www.youtube.com/watch?v=cYWiDiIUxQc&list=LL&index=4&t=397s&ab_channel=CoreySchafer


    >>> from blogpost import db 
    C:\Users\Zach\AppData\Local\Programs\Python\Python39\lib\site-packages\flask_sqlalchemy\__init__.py:833: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
      warnings.warn(FSADeprecationWarning(
    >>> db.create_all()
    >>> from blogpost import User, Post
    >>> user_1 = User(username='Zach', email='zach@aol.com', password='password') 
    >>> db.session.add(user_1)
    >>> user_2 = User(username='Joe', email='Joe@aol.com', password='password')   
    >>> db.session.add(user_2) 
    >>> db.session.commit()
    >>> User.query.all()
    [User('Zach,zach@aol.com,default.jpg'), User('Joe,Joe@aol.com,default.jpg')]
    >>> User.query.first()
    User('Zach,zach@aol.com,default.jpg')
    >>> User.query.filter_by(username='Zach').all()
    [User('Zach,zach@aol.com,default.jpg')]
    >>> user = User.query.filter_by(username='Zach').first() 
    >>> user
    User('Zach,zach@aol.com,default.jpg')
    >>> user.id
    1
    >>> user = User.query.get(1)
    >>> user
    User('Zach,zach@aol.com,default.jpg')
    >>> user.posts
    []
    >>> post_1 = Post(title='Blog 1', content='First Post Content!', user_id=user.id) 
    >>> post_2 = Post(title='Blog 2', content='Second Post Content!', user_id=user.id) 
    >>> db.session.add(post_1)
    >>> db.session.add(post_2) 
    >>> db.session.commit()
    >>> user.posts
    [Post('Blog 1,2021-01-23 00:27:37.327020'), Post('Blog 2,2021-01-23 00:27:37.329020')]
    >>> for post in user.posts:
    ...     print(post.title)   
    ... 
    Blog 1
    Blog 2
    >>> post = Post.query.first()
    >>> post
    Post('Blog 1,2021-01-23 00:27:37.327020')
    >>> post.user_id
    1
    >>> post.author
    User('Zach,zach@aol.com,default.jpg')



---Video 6- User AUthentication 

    pip install flask-bcrypt

-- Code to has a passwrod and insert it into the database along with the other things

    hashed_password= bcrypt.generate_password_hash(form.password.data).decode('utf-8') # creating a hashed pw 
    user = User(username=form.username.data,email=form.email.data,password=hashed_password)
    db.session.add(user)
    db.session.commit()


--- How to get the users from the database
    for u in User.query:  
    ...     u
    User('Zach,zach@aol.com,default.jpg')
    User('Joe,Joe@aol.com,default.jpg')
    User('zooom33,ICoveredWarsUKnow@aol.com,default.jpg')


-- Added to the forms.py to check if the username/ email is taken and will throw an error if it is
    def validate_username(self,username):
        user = User.query.filter_by(username=username.data).first()
        if user:
          raise ValidationError("That username is taken, please choose a different one!")

      def validate_email(self,email):
        email = User.query.filter_by(email=email.data).first()
        if email:
          raise ValidationError("That email is taken, please choose a different one!")


--Log in System
    pip install flask-login
from flask_login import LoginManager, login_manager
login_manager = LoginManager(app)
from flask_login import UserMixin


if current_user.is_authenticated: # If already loggined in its goes to home page instead
    return redirect(url_for('home'))

--- End Video 6 



--VIDEO 7 USER ACCOUNT and profile picture

--Video 8 


--for the buttons for post.html
https://getbootstrap.com/docs/4.0/components/modal/ 



--Video 9 Pagination 
https://www.youtube.com/watch?v=PSWf2TjTGNY&ab_channel=CoreySchafer


//Pagination is to only show a certain amount of posts on a certian page could be useful in our project to only show a certain number of stuff at a time

['__class__', '__delattr__', '__dict__', '__dir__', 
'__doc__', '__eq__', '__format__', '__ge__', 
'__getattribute__', '__gt__', '__hash__', '__init__', 
'__init_subclass__', '__le__', '__lt__', '__module__', 
'__ne__', '__new__', '__reduce__', '__reduce_ex__', 
'__repr__', '__setattr__', '__sizeof__', '__str__', 
'__subclasshook__', '__weakref__', 'has_next', 'has_prev', 
'items', 'iter_pages', 
'next', 'next_num', 'page', 'pages', 'per_page', 
'prev', 'prev_num', 'query', 'total']

-- Below for loop makes buttons that go thru each posts. Should be used somewhere in the project

  {% for page_num in posts.iter_pages() %}
    
    {% if page_num %}

    <a class="btn btn-outline-info mb-4" href="{{url_for('home',page=page_num)}}">{{page_num}}</a>

    {% else %}
 
  {% endfor %}



    -- How we make it so the newest posts are shown at the top
  posts = Post.query.order_by(Post.date_posted.desc()).paginate(page=page,per_page=5)






-- Video 10  email and password reset

https://www.youtube.com/watch?v=vutyTx7IaAI&ab_channel=CoreySchafer

 from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
 s = Serializer('secret',30)                     The token is valid for 30 seconds
token = s.dumps({'user_id':1}).decode('utf-8')
>>> token
'eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMjUzMTg4MCwiZXhwIjoxNjEyNTMxOTEwfQ.eyJ1c2VyX2lkIjoxfQ.PlIgZzZ3EsXsk8zkTQ5q-z9tRZ4cswcug6ivAibTJf1S2NlU4bcuH_SIppZA3XvJfSSbuOmCdBRGXo5-pCo0Aw'


def get_reset_token(self,expires_sec=1800):
    s = Serializer(app.config['SECRET_KEY'],expires_sec)
    return s.dumps({'user_id':self.id}).decode('utf-8')


  @staticmethod
  def verify_reset_token(token):
    s = Serializer(app.config['SECRET_KEY'])
    try:
      user_id = s.loads(token)['user_id'] 
    except:
      return None
    
    return User.query.get(user_id)



    
def send_reset_email(user):
    token = user.get_reset_token()
    msg = Message('Password Reset Request',
                  sender='noreply@demo.com',
                  recipients=[user.email])
    msg.body = f'''To reset your password, visit the following link:
{url_for('reset_token', token=token, _external=True)}
If you did not make this request then simply ignore this email and no changes will be made.
'''
    mail.send(msg)


@app.route("/reset_password", methods=['GET', 'POST'])
def reset_request():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RequestRestForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        send_reset_email(user)
        flash('An email has been sent with instructions to reset your password.', 'info')
        return redirect(url_for('login'))
    return render_template('reset_request.html', title='Reset Password', form=form)


@app.route("/reset_password/<token>", methods=['GET', 'POST'])
def reset_token(token):
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    user = User.verify_reset_token(token)
    if user is None:
        flash('That is an invalid or expired token', 'warning')
        return redirect(url_for('reset_request'))
    form = ResetPasswordForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        user.password = hashed_password
        db.session.commit()
        flash('Your password has been updated! You are now able to log in', 'success')
        return redirect(url_for('login'))
    return render_template('reset_token.html', title='Reset Password', form=form)



    --FLASK WEBSITE for CSS

    https://pythonhow.com/add-css-to-flask-website/

    //CSS TIP---
      if css doesnt change delete browser cache 



      //3/18/2021 JSON Request https://www.youtube.com/watch?v=dkgRxBw_4no&ab_channel=Craftech
        //This will be how we retrieve data from the webserver. Be able to test easy with Postman hopefully
        // we import jsonify from flask
        //Note.. Doesnt seem to work need to look more into it. or we can stick to what we have
        //Added so if password and checkpassword dont match, it returns a 400 bad request so it can be tested on postman.
        // TO DO 3/19 --> Set up Sessions 
        
        //3/19 Sessions
        https://www.youtube.com/watch?v=iIhAfX4iek0&t=197s&ab_channel=TechWithTim  Tutorial on Sessions

      
    3/20 
    https://pythonbasics.org/flask-sessions/
      What was done today was add the user ability to logout with setting sessions user to null 


  3/21
  What was done today
  1. The right url shows up when redirected from one page to antother
  2. Added the webpage for the social media page, it will only show up when user is logged in, if they try to access it while logged out it will redirect to login.
  3.